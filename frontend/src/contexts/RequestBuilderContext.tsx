import { useState, ReactNode, useEffect } from "react"; import { RequestBuilderContext, initialState, type RequestBuilderState } from "./request-builder-context"; export function RequestBuilderProvider({ children }: { children: ReactNode }) { const [state, setFullState] = useState<RequestBuilderState>(() => { const savedState = localStorage.getItem("requestBuilderState"); if (savedState) { try { return JSON.parse(savedState); } catch (e) { console.error("Failed to parse saved request builder state:", e); } } return initialState; }); useEffect(() => { localStorage.setItem("requestBuilderState", JSON.stringify(state)); }, [state]); const setState = (newState: Partial<RequestBuilderState>) => { setFullState((prevState) => ({ ...prevState, ...newState })); }; const resetState = () => { setFullState(initialState); localStorage.removeItem("requestBuilderState"); }; return ( <RequestBuilderContext.Provider value={{ state, setState, resetState }}> {children} </RequestBuilderContext.Provider> ); }
